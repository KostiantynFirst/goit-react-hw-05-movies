{"version":3,"file":"static/js/73.4d220d4b.chunk.js","mappings":"kRAEaA,EAAYC,EAAAA,GAAAA,IAAH,iFAKTC,EAAYD,EAAAA,GAAAA,IAAH,gHAOTE,EAAYF,EAAAA,GAAAA,IAAH,wEAKTG,EAAaH,EAAAA,GAAAA,IAAH,6DAKVI,EAAUJ,EAAAA,GAAAA,IAAH,oHAOPK,EAAUL,EAAAA,GAAAA,IAAH,8F,SC+BpB,EAzDa,WAET,IAAOM,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAmBJ,OAhBIC,EAAAA,EAAAA,YAAU,WACN,GAAIP,EAAJ,CAIA,IAAMQ,EAAc,mCAAG,qGACDC,EAAAA,EAAAA,IAAQT,GADP,OACbU,EADa,OAEnBN,EAAYM,EAAIC,KAAKC,MACrBN,GAAW,GAHQ,2CAAH,qDAMpBE,GARC,CAUJ,GAAE,CAACR,KAIJ,UAACP,EAAD,WACKY,IAAW,SAACV,EAAD,yBACXU,IACG,SAACV,EAAD,UACGQ,EAASU,KAAI,YAA0C,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aACnC,OACI,UAACrB,EAAD,WACKqB,GACC,SAACpB,EAAD,CAAYqB,IAAK,kCAAoCD,EAAcE,IAAKH,KAEtE,SAAClB,EAAD,+BAEJ,0BACI,uCACCiB,MAEL,0BACI,kCACCC,OAZOF,EAiBrB,OAGAT,GAA+B,IAApBF,EAASiB,SAAgB,SAACrB,EAAD,0DAKlD,C,sKC1DDsB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAWC,mCAEJC,EAAiB,mCAAG,6GAGXH,EAAAA,EAAAA,IAAA,sBACO,CACnBI,OAAQ,CACJC,QAASJ,KANU,cAGvBZ,EAHuB,yBAUvBA,GAVuB,gCAY7BiB,QAAQC,IAAI,QAAZ,MAZ6B,yDAAH,qDAgBjBC,EAAa,mCAAG,WAAO7B,GAAP,gGAEPqB,EAAAA,EAAAA,IAAA,gBAAmBrB,GAAW,CAC9CyB,OAAQ,CACNC,QAASJ,KAJY,cAEnBZ,EAFmB,yBAOlBA,GAPkB,gCAUzBiB,QAAQC,IAAI,QAAZ,MAVyB,yDAAH,sDAgBbE,EAAc,mCAAG,WAAOC,GAAP,gGAERV,EAAAA,EAAAA,IAAA,eAA0B,CAC1CI,OAAQ,CACNC,QAASJ,EACTU,SAAU,QACVC,MAAOF,EACPG,eAAe,EACfC,KAAM,KARgB,cAEpBzB,EAFoB,yBAWnBA,GAXmB,gCAcxBiB,QAAQC,IAAI,QAAZ,MAdwB,yDAAH,sDAkBdnB,EAAO,mCAAG,WAAOT,GAAP,gGAEDqB,EAAAA,EAAAA,IAAA,gBAAmBrB,EAAnB,YAAsC,CACtDyB,OAAQ,CACNC,QAASJ,EACTU,SAAU,WALK,cAEbtB,EAFa,yBAQZA,GARY,gCAUnBiB,QAAQC,IAAI,QAAZ,MAVmB,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.js","components/movie-api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    font-family: Arial, sans-serif;\n    padding: 20px;\n`;\n\nexport const MovieInfo = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: 20px;\n`;\n\nexport const Actorcard = styled.div`\n    max-width: 200px;\n    text-align: center;\n`;\n\nexport const ActorImage = styled.img`\n    width: 100%;\n    height: auto;\n`;\n\nexport const NoImage = styled.div`\n    background-color: #ccc;\n    color: #fff;\n    padding: 10px;\n    border-radius: 5px;\n`;\n\nexport const Message = styled.div`\n    text-align: center;\n    font-size: 18px;\n    margin-top: 20px;\n`","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getCast } from \"components/movie-api\";\nimport { Container, MovieInfo, Actorcard, ActorImage, NoImage, Message } from \"./Cast.styled\";\n\nconst Cast = () => {\n\n    const {movieId} = useParams();\n    const [castData, setCastData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n\n    useEffect(() => {\n        if(!movieId) {\n            return;\n        }\n\n        const getCastDetails = async () => {\n            const res = await getCast(movieId);\n            setCastData(res.data.cast);\n            setLoading(false);\n        }\n\n        getCastDetails();\n\n    }, [movieId]);\n\n\nreturn (\n    <Container>\n        {loading && <MovieInfo>Loading...</MovieInfo> }\n        {loading && (\n            <MovieInfo>\n              {castData.map(({id, character, name, profile_path}) => {\n                return (\n                    <Actorcard key={id}>\n                        {profile_path ? (\n                          <ActorImage src={'https://image.tmdb.org/t/p/w500' + profile_path} alt={name} />  \n                        ) : (\n                            <NoImage>Image not found</NoImage>\n                        )}\n                        <p>\n                            <b>Character: </b>\n                            {character}\n                        </p>\n                        <p>\n                            <b>Name: </b>\n                            {name}\n                        </p>\n\n                    </Actorcard>\n                );\n              })}  \n            </MovieInfo>\n            )}\n             {!loading && castData.length === 0 && <Message> We don't have information for this movie</Message>}\n\n    </Container>\n\n    );\n};\n\nexport default Cast;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst MOVIEKEY = process.env.REACT_APP_CAT_API_KEY;\n\nexport const getTrendingMovies = async () => {\n\n  try {\n    const res = await axios.get(\n      `trending/movie/day?`, {\n          params: {\n              api_key: MOVIEKEY,\n          }\n      }\n    );\n   return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getMoviesInfo = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: MOVIEKEY,\n      }\n    });\n    return res;\n  \n  } catch (error) {\n    console.log('error', error);\n}\n}\n\n// 'https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1\n\nexport const getMovieSearch = async (search) => {\n  try {\n    const res = await axios.get(`search/movie`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n        query: search,\n        include_adult: false,\n        page: 1,\n      },\n    });\n    return res;\n    \n  } catch (error) {\n      console.log('error', error);\n  }\n}\n\nexport const getCast = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n      },\n    });\n    return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getReviews = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n        page: 1,\n      }\n    });\n    return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}"],"names":["Container","styled","MovieInfo","Actorcard","ActorImage","NoImage","Message","movieId","useParams","useState","castData","setCastData","loading","setLoading","useEffect","getCastDetails","getCast","res","data","cast","map","id","character","name","profile_path","src","alt","length","axios","MOVIEKEY","process","getTrendingMovies","params","api_key","console","log","getMoviesInfo","getMovieSearch","search","language","query","include_adult","page"],"sourceRoot":""}