{"version":3,"file":"static/js/514.a3b7d901.chunk.js","mappings":"wRAEaA,EAAmBC,EAAAA,GAAAA,IAAH,iFAKhBC,EAAkBD,EAAAA,GAAAA,GAAH,gFAMfE,EAAaF,EAAAA,GAAAA,GAAH,6HAOVG,EAAaH,EAAAA,GAAAA,IAAH,gGAMVI,EAAeJ,EAAAA,GAAAA,IAAH,+GAOZK,EAAaL,EAAAA,GAAAA,IAAH,gDAIVM,EAAgBN,EAAAA,GAAAA,EAAH,qEAKbO,EAAgBP,EAAAA,GAAAA,IAAH,8F,SCK1B,EA1CgB,WACZ,IAAOQ,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA4CE,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACN,GAAIP,EAAJ,CAIA,IAAMQ,EAAiB,mCAAG,qGACJC,EAAAA,EAAAA,IAAWT,GADP,OAChBU,EADgB,OAEtBN,EAAkBM,EAAIC,KAAKC,SAC3BN,GAAW,GAHW,2CAAH,qDAMvBE,GARC,CASJ,GAAE,CAACR,EAASI,KAIT,SAACb,EAAD,WAEFc,GAAWF,EAAeU,OAAS,GACjC,SAACpB,EAAD,UACKU,EAAeW,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,cAAvB,OAChB,UAACxB,EAAD,YACI,UAACC,EAAD,WACKuB,IAAiB,SAACtB,EAAD,CAAcuB,IAAKD,EAAeE,IAAI,mBACxD,SAACvB,EAAD,UAAamB,QAEjB,SAAClB,EAAD,UAAgBmB,MALHF,EADD,OAWxB,SAAChB,EAAD,wDAIP,C,8LC3CDsB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAWC,mCAEJC,EAAiB,mCAAG,6GAGXH,EAAAA,EAAAA,IAAA,sBACO,CACnBI,OAAQ,CACJC,QAASJ,KANU,cAGvBZ,EAHuB,yBAUvBA,GAVuB,gCAY7BiB,QAAQC,IAAI,QAAZ,MAZ6B,yDAAH,qDAgBjBC,EAAa,mCAAG,WAAO7B,GAAP,gGAEPqB,EAAAA,EAAAA,IAAA,gBAAmBrB,GAAW,CAC9CyB,OAAQ,CACNC,QAASJ,KAJY,cAEnBZ,EAFmB,yBAOlBA,GAPkB,gCAUzBiB,QAAQC,IAAI,QAAZ,MAVyB,yDAAH,sDAgBbE,EAAc,mCAAG,WAAOC,GAAP,gGAERV,EAAAA,EAAAA,IAAA,eAA0B,CAC1CI,OAAQ,CACNC,QAASJ,EACTU,SAAU,QACVC,MAAOF,EACPG,eAAe,EACfC,KAAM,KARgB,cAEpBzB,EAFoB,yBAWnBA,GAXmB,gCAcxBiB,QAAQC,IAAI,QAAZ,MAdwB,yDAAH,sDAkBdQ,EAAO,mCAAG,WAAOpC,GAAP,gGAEDqB,EAAAA,EAAAA,IAAA,gBAAmBrB,EAAnB,YAAsC,CACtDyB,OAAQ,CACNC,QAASJ,EACTU,SAAU,WALK,cAEbtB,EAFa,yBAQZA,GARY,gCAUnBiB,QAAQC,IAAI,QAAZ,MAVmB,yDAAH,sDAcPnB,EAAU,mCAAG,WAAOT,GAAP,gGAEJqB,EAAAA,EAAAA,IAAA,gBAAmBrB,EAAnB,YAAsC,CACtDyB,OAAQ,CACNC,QAASJ,EACTU,SAAU,QACVG,KAAM,KANY,cAEhBzB,EAFgB,yBASfA,GATe,gCAWtBiB,QAAQC,IAAI,QAAZ,MAXsB,yDAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.js","components/movie-api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsContainer = styled.div`\n    font-family: Arial, sans-serif;\n    padding: 20px;\n`;\n\nexport const ReviewsInfolist = styled.ul`\n    list-style: none;\n    padding: 0;\n    margin: 0;\n`;\n\nexport const ReviewItem = styled.li`\n    border: 1px, solid #ccc;\n    border-radius: 8px;\n    margin-bottom: 20px;\n    padding: 20px;\n`;\n\nexport const AuthorInfo = styled.div`\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n`;\n\nexport const AuthorAvatar = styled.img`\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    margin-right: 10px;\n`;\n\nexport const AuthorName = styled.div`\n    font-weight: bold;\n`;\n\nexport const ReviewContent = styled.p`\n    font-size: 16px;\n    line-height: 1.5;\n`;\n\nexport const NoInfoMessage = styled.div`\n    text-align: center;\n    font-size: 18px;\n    margin-top: 20px;\n`;","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { getReviews } from \"components/movie-api\";\nimport { ReviewsContainer, ReviewsInfolist, ReviewItem, AuthorInfo, AuthorAvatar, AuthorName, ReviewContent, NoInfoMessage } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n    const {movieId} = useParams();\n    const [reviewsDetails, setReviewsDetails] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if(!movieId) {\n            return;\n        }\n\n        const getReviewsDetails = async () => {\n            const res = await getReviews(movieId);\n            setReviewsDetails(res.data.results);\n            setLoading(false);\n        }\n\n        getReviewsDetails();\n    }, [movieId, setReviewsDetails]);\n\n\n    return (\n        <ReviewsContainer>\n\n    {!loading && reviewsDetails.length > 0 ? (\n        <ReviewsInfolist>\n            {reviewsDetails.map(({id, author, content, author_avatar }) => (\n                <ReviewItem key={id}>\n                    <AuthorInfo>\n                        {author_avatar && <AuthorAvatar src={author_avatar} alt=\"Author Avatar\" />}\n                        <AuthorName>{author}</AuthorName>\n                    </AuthorInfo>\n                    <ReviewContent>{content}</ReviewContent>\n                </ReviewItem>\n            ))}\n        </ReviewsInfolist>\n    ) : (\n        <NoInfoMessage>We don't have information for this movie</NoInfoMessage>\n    )}\n        </ReviewsContainer>\n)\n}\n\nexport default Reviews;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst MOVIEKEY = process.env.REACT_APP_CAT_API_KEY;\n\nexport const getTrendingMovies = async () => {\n\n  try {\n    const res = await axios.get(\n      `trending/movie/day?`, {\n          params: {\n              api_key: MOVIEKEY,\n          }\n      }\n    );\n   return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getMoviesInfo = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: MOVIEKEY,\n      }\n    });\n    return res;\n  \n  } catch (error) {\n    console.log('error', error);\n}\n}\n\n// 'https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1\n\nexport const getMovieSearch = async (search) => {\n  try {\n    const res = await axios.get(`search/movie`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n        query: search,\n        include_adult: false,\n        page: 1,\n      },\n    });\n    return res;\n    \n  } catch (error) {\n      console.log('error', error);\n  }\n}\n\nexport const getCast = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n      },\n    });\n    return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getReviews = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n        page: 1,\n      }\n    });\n    return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}"],"names":["ReviewsContainer","styled","ReviewsInfolist","ReviewItem","AuthorInfo","AuthorAvatar","AuthorName","ReviewContent","NoInfoMessage","movieId","useParams","useState","reviewsDetails","setReviewsDetails","loading","setLoading","useEffect","getReviewsDetails","getReviews","res","data","results","length","map","id","author","content","author_avatar","src","alt","axios","MOVIEKEY","process","getTrendingMovies","params","api_key","console","log","getMoviesInfo","getMovieSearch","search","language","query","include_adult","page","getCast"],"sourceRoot":""}