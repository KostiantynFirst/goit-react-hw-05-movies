{"version":3,"file":"static/js/547.61a330b3.chunk.js","mappings":"8PAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAWC,mCAEJC,EAAiB,mCAAG,6GAGXH,EAAAA,EAAAA,IAAA,sBACO,CACnBI,OAAQ,CACJC,QAASJ,KANU,cAGvBK,EAHuB,yBAUvBA,GAVuB,gCAY7BC,QAAQC,IAAI,QAAZ,MAZ6B,yDAAH,qDAgBjBC,EAAa,mCAAG,WAAOC,GAAP,gGAEPV,EAAAA,EAAAA,IAAA,gBAAmBU,GAAW,CAC9CN,OAAQ,CACNC,QAASJ,KAJY,cAEnBK,EAFmB,yBAOlBA,GAPkB,gCAUzBC,QAAQC,IAAI,QAAZ,MAVyB,yDAAH,sDAgBbG,EAAc,mCAAG,WAAOC,GAAP,gGAERZ,EAAAA,EAAAA,IAAA,gBAA2B,CAC3CI,OAAQ,CACNC,QAASJ,EACTY,OAAO,EACPC,SAAU,QACVC,KAAM,KAPgB,cAEpBT,EAFoB,yBAUnBA,GAVmB,gCAaxBC,QAAQC,IAAI,QAAZ,MAbwB,yDAAH,qD,wKCnCdQ,EAAkBC,EAAAA,GAAAA,IAAH,4EAMfC,EAAcD,EAAAA,GAAAA,MAAH,qPAeXE,EAAcF,EAAAA,GAAAA,GAAH,oSAqBXG,EAAmBH,EAAAA,GAAAA,IAAH,oF,SCgC7B,EAvEe,WAEf,OAAsCI,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4CF,EAAAA,EAAAA,WAAS,GAArD,eAAOG,EAAP,KAAuBC,EAAvB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAyCC,EAAAA,EAAAA,MAAzC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,WAE/BC,EAAAA,EAAAA,YAAU,WAEN,GAAIF,EAAJ,CAKJ,IAAMG,EAAS,mCAAG,gHAGQvB,EAAAA,EAAAA,GAAeoB,GAHvB,OAGJzB,EAHI,OAKgB,KADpB6B,EAAS7B,EAAI8B,KAAKC,SACTC,OACPb,GAAkB,GAElBF,EAAeY,GARb,gDAWV5B,QAAQgC,MAAM,yBAAd,MAXU,yDAAH,qDAgBfL,GAlBC,MAFGX,EAAe,GAsBd,GAAE,CAACQ,IASR,OACI,UAACf,EAAD,YACI,SAACE,EAAD,CACIsB,KAAK,SACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,MAAOd,GAAS,GAChBe,SAfU,SAACC,GACnB,IAAMC,EAAcD,EAAEE,OAAOJ,MAC7Bf,EAAgB,CAAClB,OAAQoC,GAC5B,IAcQjB,IAAUP,IACP,SAACL,EAAD,UACKG,EAAY4B,KAAK,gBAAEC,EAAF,EAAEA,GAAIX,EAAN,EAAMA,KAAMY,EAAZ,EAAYA,MAAZ,OACjB,yBACG,UAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAACC,KAAK7B,GAAhC,UACC0B,EADD,IACSZ,IADuCW,IAD1CA,EADQ,MASzB3B,IAAkB,SAACJ,EAAD,4DAK1B,C","sources":["components/movie-api.js","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.js"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst MOVIEKEY = process.env.REACT_APP_CAT_API_KEY;\n\nexport const getTrendingMovies = async () => {\n\n  try {\n    const res = await axios.get(\n      `trending/movie/day?`, {\n          params: {\n              api_key: MOVIEKEY,\n          }\n      }\n    );\n   return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getMoviesInfo = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: MOVIEKEY,\n      }\n    });\n    return res;\n  \n  } catch (error) {\n    console.log('error', error);\n}\n}\n\n// 'https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1\n\nexport const getMovieSearch = async (search) => {\n  try {\n    const res = await axios.get(`/search/movie`, {\n      params: {\n        api_key: MOVIEKEY,\n        adult: false,\n        language: 'en-US',\n        page: 1,\n      }\n    });\n    return res;\n    \n  } catch (error) {\n      console.log('error', error);\n  }\n}","import styled from \"styled-components\";\n\nexport const SearchContainer = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const SearchInput = styled.input`\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  margin-bottom: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n  outline: none;\n\n  &:focus {\n    border-color: #007bff;\n  }\n`;\n\nexport const ResultsList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n\n  li {\n    margin-bottom: 15px;\n  }\n\n  a {\n    text-decoration: none;\n    color: #333;\n    font-weight: bold;\n    display: block;\n    transition: color 0.3s ease;\n\n    &:hover {\n      color: #007bff;\n    }\n  }\n`;\n\nexport const NoResultsMessage = styled.div`\n  color: #ff0000;\n  font-size: 18px;\n  margin-top: 20px;\n`;","import { useState, useEffect } from \"react\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { getMovieSearch } from \"components/movie-api\";\nimport { SearchContainer, SearchInput, ResultsList, NoResultsMessage } from \"./Movies.styled\";\n\nconst Movies = () => {\n\nconst [movieSearch, setMovieSearch] = useState([]);\nconst [noResultsFound, setNoResultsFound] = useState(false);\nconst location = useLocation();\nconst [searchParams, setSearchParams ] = useSearchParams();\nconst query = searchParams.get('search'); \n   \nuseEffect(() => {\n\n    if(!query) {\n    setMovieSearch([]);\n    return;\n}\n\nconst findMovie = async () => {\n\n    try {\n        const res = await getMovieSearch(query);\n        const movies = res.data.results;\n            if (movies.length === 0) {\n                setNoResultsFound(true);\n            } else {\n                setMovieSearch(movies);\n            }\n    } catch (error) {\n        console.error('Error fetching movies:', error);\n    }\n        \n}\n\nfindMovie();\n\n    }, [query]);\n\n\nconst onSearchQuery = (e) => {\n    const searchQuery = e.target.value;\n    setSearchParams({search: searchQuery });\n}\n\n\nreturn (\n    <SearchContainer>\n        <SearchInput \n            name=\"search\" \n            type=\"text\" \n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            value={query || ''}\n            onChange={onSearchQuery} \n        />\n        {query && !noResultsFound && (\n            <ResultsList>\n                {movieSearch.map (({id, name, title}) => (\n                 <li key={id}>\n                    <Link to={`${id}`} state={{from:location}} key={id}>\n                    {title} {name}\n                    </Link>\n                 </li>   \n                ))}\n            </ResultsList>\n        )}\n        {noResultsFound && <NoResultsMessage>Sorry, there are no results for your query!</NoResultsMessage>}\n\n    </SearchContainer>\n    ) \n\n}\n\nexport default Movies;\n\n"],"names":["axios","MOVIEKEY","process","getTrendingMovies","params","api_key","res","console","log","getMoviesInfo","movieId","getMovieSearch","search","adult","language","page","SearchContainer","styled","SearchInput","ResultsList","NoResultsMessage","useState","movieSearch","setMovieSearch","noResultsFound","setNoResultsFound","location","useLocation","useSearchParams","searchParams","setSearchParams","query","get","useEffect","findMovie","movies","data","results","length","error","name","type","autoComplete","autoFocus","placeholder","value","onChange","e","searchQuery","target","map","id","title","to","state","from"],"sourceRoot":""}