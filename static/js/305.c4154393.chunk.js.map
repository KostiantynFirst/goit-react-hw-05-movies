{"version":3,"file":"static/js/305.c4154393.chunk.js","mappings":"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","sources":["components/movie-api.js","pages/MovieDetails/MovieDetails.styled.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.js","pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst MOVIEKEY = process.env.REACT_APP_CAT_API_KEY;\n\nexport const getTrendingMovies = async () => {\n\n  try {\n    const res = await axios.get(\n      `trending/movie/day?`, {\n          params: {\n              api_key: MOVIEKEY,\n          }\n      }\n    );\n   return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getMoviesInfo = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: MOVIEKEY,\n      }\n    });\n    return res;\n  \n  } catch (error) {\n    console.log('error', error);\n}\n}\n\n// 'https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1\n\nexport const getMovieSearch = async (search) => {\n  try {\n    const res = await axios.get(`search/movie`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n        query: search,\n        include_adult: false,\n        page: 1,\n      },\n    });\n    return res;\n    \n  } catch (error) {\n      console.log('error', error);\n  }\n}\n\nexport const getCast = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n      },\n    });\n    return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nexport const getReviews = async (movieId) => {\n  try {\n    const res = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: MOVIEKEY,\n        language: 'en-US',\n        page: 1,\n      }\n    });\n    return res;\n  } catch (error) {\n    console.log('error', error);\n  }\n}","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const MainWrapper = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const BackLink = styled(Link)`\n  text-decoration: none;\n  color: #007bff;\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 16px;\n`;\n\nexport const InfoBox = styled.div`\n  margin-top: 30px;\n  padding: 20px;\n  background-color: #f5f5f5;\n`;\n\nexport const InfoLinksList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  margin-top: 15px;\n\n  li {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const InfoItemLink = styled(Link)`\n  text-decoration: none;\n  color: #333;\n  font-weight: bold;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;","import styled from \"styled-components\";\n\nexport const MovieContainer = styled.div`\n    font-family: Arial, sans-serif;\n    display: flex;\n    gap: 20px;\n    padding: 20px;\n`;\n\nexport const PosterImage = styled.img`\n    width: 300px;\n    height: auto;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`;\n\nexport const MovieDetails = styled.div`\n    flex: 1;\n    padding-left: 20px;\n`;\n\nexport const NoImage = styled.div`\n    width: 300px;\n    height: 450px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #f0f0f0;\n    color: #333;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`;\n\nexport const MovieTitle = styled.h1`\n    font-size: 32px;\n    margin-bottom: 10px;\n`;\n\nexport const InfoParagraph = styled.p`\n    font-size: 16px;\n    margin-bottom: 10px;\n`;\n\nexport const OverviewHeading = styled.h2`\n    font-size: 24px;\n    margin-top: 20px;\n    margin-bottom: 10px;\n`;\n\nexport const GenresHeading = styled.h2`\n    font-size: 24px;\n    margin-top: 20px;\n    margin-bottom: 10px;\n`\n\nexport const GenreList = styled.ul`\n    list-style: none;\n    padding: 0;\n`;\n\nexport const GenreItem = styled.li`\n    font-size: 18px;\n    margin-bottom: 5px;\n    ${props => props.isSingleGenre && `\n        background-color: #e74c3c;\n        color: #fff;\n        border-radius: 4px;\n        padding: 5px 10px;\n    `}\n`;\n\n\n\n// Добавим стили для User Score\nexport const UserScore = styled.span`\n    font-size: 18px;\n    font-weight: bold;\n    color: #f39c12;\n`;\n\nexport const Status = styled.span`\n    font-size: 18px;\n    font-weight: bold;\n    color: #2ecc71;\n`;\n\n// Добавим стили для описания\nexport const OverviewText = styled.p`\n    font-size: 18px;\n    line-height: 1.4;\n    margin-bottom: 20px;\n`;\n\n// Добавим стили для жанров\nexport const GenreBadge = styled.span`\n    background-color: #3498db;\n    color: #fff;\n    font-size: 14px;\n    border-radius: 4px;\n    padding: 5px 10px;\n    margin-right: 10px;\n`;\n\n// Добавим стили для отдельного жанра\nexport const SingleGenre = styled(GenreBadge)`\n    background-color: #e74c3c;\n`;\n","import { MovieContainer, PosterImage, MovieDetails, NoImage, MovieTitle, InfoParagraph, OverviewHeading, GenresHeading, GenreList, GenreItem, UserScore, Status, OverviewText, GenreBadge } from \"./MovieInfo.styled\";\n\nexport const MovieDetailsComponent = ({ movieInfoDetails }) => {\n    const { title, original_title, release_date, overview = 'There is no overview', vote_average, genres = [], poster_path, status,} = movieInfoDetails;\n\n\n    const date = new Date(release_date).getFullYear();\n    const userRate = Math.round(vote_average * 10);\n    // console.log(vote_average);\n\n    return (\n        <MovieContainer>\n            {poster_path ? (\n                <PosterImage src={'https://image.tmdb.org/t/p/w500' + poster_path} alt=\"poster\" />\n            ) : (\n                <NoImage>No image</NoImage>\n            )}\n            <MovieDetails>\n                <MovieTitle>\n                    {title}/{original_title}\n                </MovieTitle>\n                <InfoParagraph>\n                    <b>Release date: </b> {date}\n                </InfoParagraph>\n                <InfoParagraph>\n                    <b>User Score: </b>\n                  <UserScore>{userRate}%</UserScore>  \n                </InfoParagraph>\n                <InfoParagraph>\n                    <b>Status:</b> \n                    <Status>{status}</Status>\n                </InfoParagraph>\n                <OverviewHeading>Overview</OverviewHeading>\n                <OverviewText>{overview}</OverviewText>\n                <GenresHeading>Genres</GenresHeading>\n                <GenreList>\n                    {genres.map(genre => (\n                        <GenreItem key={genre.id}>\n                            <GenreBadge>{genre.name}</GenreBadge>\n                        </GenreItem>\n                    ))}\n                </GenreList>\n                </MovieDetails>\n            </MovieContainer>\n\n    );\n\n};\n","import { useEffect, useState, useRef, Suspense} from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { getMoviesInfo } from \"components/movie-api\";\nimport { MainWrapper, BackLink, InfoBox, InfoLinksList, InfoItemLink } from \"./MovieDetails.styled\";\nimport { MovieDetailsComponent } from \"components/MovieInfo/MovieInfo\";\n\nconst MovieDetails = () => {\n\n    const [movieDetails, setMovieDetails] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const location = useLocation();\n    const backLinkLocation = useRef(location.state?.from);\n    const { movieId } = useParams();\n   \n\n    useEffect(() => {\n        if(!movieId){\n            return;\n        }\n\n        const getMovieDetails = async () => {\n            const res = await getMoviesInfo(movieId);\n            if (res.data.length === 0) {\n                return;\n            }\n            setMovieDetails(res.data);\n            setLoading(false);\n        }\n        \n        getMovieDetails();\n\n\n    }, [movieId]);\n\n\n    // console.log(movieDetails);\n    // console.log(location);\n    \n    \n    return (\n\n        <MainWrapper>\n            <BackLink to={backLinkLocation.current ?? '/'}>\n            Go back\n            </BackLink>\n\n            {!loading && <MovieDetailsComponent movieInfoDetails={movieDetails} />}\n\n            <InfoBox>\n                <p>Additional information</p>\n                <InfoLinksList>\n                    <li>\n                        <InfoItemLink to={'cast'}>Cast</InfoItemLink>\n                    </li>\n                    <li>\n                        <InfoItemLink to={'reviews'}>Reviews</InfoItemLink>\n                    </li>\n\n                </InfoLinksList>\n\n            </InfoBox>\n\n        <Suspense fallback={<div>Loading...</div>}>\n             <Outlet />\n         </Suspense>\n\n        </MainWrapper>\n\n    );\n\n    \n  \n};\n\nexport default MovieDetails;  "],"names":["axios","MOVIEKEY","process","getTrendingMovies","params","api_key","res","console","log","getMoviesInfo","movieId","getMovieSearch","search","language","query","include_adult","page","getCast","MainWrapper","styled","BackLink","Link","InfoBox","InfoLinksList","InfoItemLink","MovieContainer","PosterImage","MovieDetails","NoImage","MovieTitle","InfoParagraph","OverviewHeading","GenresHeading","GenreList","GenreItem","props","isSingleGenre","UserScore","Status","OverviewText","GenreBadge","MovieDetailsComponent","movieInfoDetails","title","original_title","release_date","overview","vote_average","genres","poster_path","status","date","Date","getFullYear","userRate","Math","round","src","alt","map","genre","name","id","useState","movieDetails","setMovieDetails","loading","setLoading","location","useLocation","backLinkLocation","useRef","state","from","useParams","useEffect","getMovieDetails","data","length","to","current","Suspense","fallback"],"sourceRoot":""}